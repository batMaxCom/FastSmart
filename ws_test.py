import asyncio
import json
import websockets
import logging

logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

HOST = "localhost"
PORT = 3000

tv_state = {
    "power": True,
    "volume": 20,
    "mute": False,
    "channel": 1
}

async def handle_client(websocket):
    logging.info(f"üîå –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: {websocket.remote_address}")

    try:
        async for message in websocket:
            data = json.loads(message)
            logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")

            msg_type = data.get("type")
            uri = data.get("uri")

            # –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            if msg_type == "register":
                response = {
                    "type": "registered",
                    "payload": {
                        "client-key": "mock-client-key"
                    }
                }
                await websocket.send(json.dumps(response))
                logging.info("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∏—Ç–∞–Ω–∏—è
            elif uri == "ssap://com.webos.service.tvpower/power/getPowerState":
                await websocket.send(json.dumps({
                    "type": "response",
                    "id": data.get("id"),
                    "payload": {
                        "returnValue": tv_state["power"]
                    }
                }))
                logging.info(f"‚ö° –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∏—Ç–∞–Ω–∏—è: {tv_state['power']}")

            # –í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
            elif uri == "ssap://system/turnOff":
                tv_state["power"] = False
                await websocket.send(json.dumps({
                    "type": "response",
                    "id": data.get("id"),
                    "payload": {"returnValue": True}
                }))
                logging.info("üì¥ –¢–µ–ª–µ–≤–∏–∑–æ—Ä –≤—ã–∫–ª—é—á–µ–Ω")

            # –í–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–∞
            elif uri == "ssap://system/turnOn":
                tv_state["power"] = True
                await websocket.send(json.dumps({
                    "type": "response",
                    "id": data.get("id"),
                    "payload": {"returnValue": True}
                }))
                logging.info("üì∫ –¢–µ–ª–µ–≤–∏–∑–æ—Ä –≤–∫–ª—é—á–µ–Ω")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞—É–¥–∏–æ
            elif uri == "ssap://audio/getStatus":
                await websocket.send(json.dumps({
                    "type": "response",
                    "id": data.get("id"),
                    "payload": {
                        "volume": tv_state["volume"],
                        "mute": tv_state["mute"]
                    }
                }))
                logging.info("üîä –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –∑–≤—É–∫–∞")

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
            elif uri == "ssap://audio/setVolume":
                new_volume = data.get("payload", {}).get("volume")
                if isinstance(new_volume, int):
                    tv_state["volume"] = new_volume
                    logging.info(f"üîà –ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {new_volume}")
                await websocket.send(json.dumps({
                    "type": "response",
                    "id": data.get("id"),
                    "payload": {"returnValue": True}
                }))

            else:
                logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {uri}")
                await websocket.send(json.dumps({
                    "type": "error",
                    "id": data.get("id"),
                    "payload": {"message": "Unknown command"}
                }))
    except websockets.exceptions.ConnectionClosed:
        logging.info("‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")

async def start_server():
    server = await websockets.serve(handle_client, HOST, PORT)
    logging.info(f"üåê –°–µ—Ä–≤–µ—Ä WebSocket –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{HOST}:{PORT}")
    await server.wait_closed()

if __name__ == "__main__":
    asyncio.run(start_server())
